{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/DELL/Desktop/TTMS_web/ttms/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"regenerator-runtime/runtime.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nexport default {\n  data: function data() {\n    return {\n      //这是登录表单的数据绑定对象\n      loginForm: {\n        username: 'zjjjj',\n        password: '123456'\n      },\n      //这是表单的验证规则对象\n      loginFormRules: {\n        username: [{\n          required: true,\n          message: '请输入名称',\n          trigger: 'blur'\n        }, {\n          min: 3,\n          max: 10,\n          message: '长度在 3 到 10个字符',\n          trigger: 'blur'\n        }],\n        password: [{\n          required: true,\n          message: '请输入密码',\n          trigger: 'blur'\n        }, {\n          min: 6,\n          max: 15,\n          message: '长度在 6 到 15个字符',\n          trigger: 'blur'\n        }]\n      }\n    };\n  },\n  methods: {\n    //重置loginForm\n    resetLoginForm: function resetLoginForm() {\n      this.$refs.loginFormRef.resetFields();\n    },\n    login: function login() {\n      var _this = this;\n\n      this.$refs.loginFormRef.validate( /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(valid) {\n          var _yield$_this$$http$po, res;\n\n          return regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  if (valid) {\n                    _context.next = 2;\n                    break;\n                  }\n\n                  return _context.abrupt(\"return\");\n\n                case 2:\n                  _context.next = 4;\n                  return _this.$http.post('login', _this.loginForm);\n\n                case 4:\n                  _yield$_this$$http$po = _context.sent;\n                  res = _yield$_this$$http$po.data;\n\n                  if (!(res.code !== 1000)) {\n                    _context.next = 8;\n                    break;\n                  }\n\n                  return _context.abrupt(\"return\", _this.$message.error('登录失败'));\n\n                case 8:\n                  _this.$message.success('登录成功');\n\n                  window.sessionStorage.setItem(\"token\", res.data.token);\n\n                  _this.$router.push('/home');\n\n                case 11:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee);\n        }));\n\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }());\n    },\n    signIn: function signIn() {\n      this.$router.push('/signin');\n    }\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgDA;EACAA,IADA,kBACA;IACA;MACA;MACAC;QACAC,iBADA;QAEAC;MAFA,CAFA;MAMA;MACAC;QACAF,WACA;UAAAG;UAAAC;UAAAC;QAAA,CADA,EAEA;UAAAC;UAAAC;UAAAH;UAAAC;QAAA,CAFA,CADA;QAKAJ,WACA;UAAAE;UAAAC;UAAAC;QAAA,CADA,EAEA;UAAAC;UAAAC;UAAAH;UAAAC;QAAA,CAFA;MALA;IAPA;EAkBA,CApBA;EAqBAG;IACA;IACAC,cAFA,4BAEA;MACA;IACA,CAJA;IAKAC,KALA,mBAKA;MAAA;;MACA;QAAA;UAAA;;UAAA;YAAA;cAAA;gBAAA;kBAAA,IACAC,KADA;oBAAA;oBAAA;kBAAA;;kBAAA;;gBAAA;kBAAA;kBAAA,OAEA,0CAFA;;gBAAA;kBAAA;kBAEAC,GAFA,yBAEAd,IAFA;;kBAAA,MAGAc,iBAHA;oBAAA;oBAAA;kBAAA;;kBAAA,iCAGA,4BAHA;;gBAAA;kBAIA;;kBACAC;;kBACA;;gBANA;gBAAA;kBAAA;cAAA;YAAA;UAAA;QAAA;;QAAA;UAAA;QAAA;MAAA;IAQA,CAdA;IAeAC,MAfA,oBAeA;MACA;IACA;EAjBA;AArBA","names":["data","loginForm","username","password","loginFormRules","required","message","trigger","min","max","methods","resetLoginForm","login","valid","res","window","signIn"],"sourceRoot":"src/views","sources":["Login.vue"],"sourcesContent":["<template>\r\n    <section>\r\n        <!-- 背景颜色 -->\r\n        <div class=\"color\"></div>\r\n        <div class=\"color\"></div>\r\n        <div class=\"color\"></div>\r\n        <div class=\"box\">\r\n            <!-- 背景圆 -->\r\n            <div class=\"circle\" style=\"--x:0\"></div>\r\n            <div class=\"circle\" style=\"--x:1\"></div>\r\n            <div class=\"circle\" style=\"--x:2\"></div>\r\n            <div class=\"circle\" style=\"--x:3\"></div>\r\n            <div class=\"circle\" style=\"--x:4\"></div>\r\n            <div class=\"container\">\r\n                <div class=\"form\">\r\n                    <h2>登录</h2>\r\n                    <!-- 登录表单区 -->\r\n                    <el-form ref=\"loginFormRef\" :model=\"loginForm\" :rules=\"loginFormRules\" label-width=\"0px\"\r\n                        class=\"login_form\">\r\n                        <!-- 用户名 -->\r\n                        <el-form-item prop=\"username\">\r\n                            <el-input v-model=\"loginForm.username\" prefix-icon=\"el-icon-s-custom\"></el-input>\r\n                        </el-form-item>\r\n                        <!-- 密码 -->\r\n                        <el-form-item prop=\"password\">\r\n                            <el-input v-model=\"loginForm.password\" prefix-icon=\"el-icon-lock\" type=\"password\">\r\n                            </el-input>\r\n                        </el-form-item>\r\n                        <!-- 按钮 -->\r\n                        <el-form-item>\r\n                            <el-button round @click=\"login\">登录</el-button>\r\n                            <el-button type=\"info\" @click=\"resetLoginForm\">重置</el-button>\r\n                        </el-form-item>\r\n                        <!-- <p class=\"forget\">忘记密码?<a href=\"#\">\r\n                                点击这里\r\n                            </a></p> -->\r\n                        <p class=\"forget\">没有账户?<a @click=\"signIn\">\r\n                                注册\r\n                            </a></p>\r\n                    </el-form>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </section>\r\n</template>\r\n\r\n\r\n<script>\r\nexport default {\r\n    data() {\r\n        return {\r\n            //这是登录表单的数据绑定对象\r\n            loginForm: {\r\n                username: 'zjjjj',\r\n                password: '123456'\r\n            },\r\n            //这是表单的验证规则对象\r\n            loginFormRules: {\r\n                username: [\r\n                    { required: true, message: '请输入名称', trigger: 'blur' },\r\n                    { min: 3, max: 10, message: '长度在 3 到 10个字符', trigger: 'blur' }\r\n                ],\r\n                password: [\r\n                    { required: true, message: '请输入密码', trigger: 'blur' },\r\n                    { min: 6, max: 15, message: '长度在 6 到 15个字符', trigger: 'blur' }\r\n                ]\r\n            }\r\n        }\r\n    },\r\n    methods: {\r\n        //重置loginForm\r\n        resetLoginForm() {\r\n            this.$refs.loginFormRef.resetFields();\r\n        },\r\n        login() {\r\n            this.$refs.loginFormRef.validate(async valid => {\r\n                if (!valid) return;\r\n                const { data: res } = await this.$http.post('login', this.loginForm);\r\n                if (res.code !== 1000) return this.$message.error('登录失败');\r\n                this.$message.success('登录成功');\r\n                window.sessionStorage.setItem(\"token\", res.data.token);\r\n                this.$router.push('/home');\r\n            });\r\n        },\r\n        signIn() {\r\n            this.$router.push('/signin');\r\n        }\r\n    }\r\n};\r\n</script>\r\n\r\n<style lang=\"less\" scoped>\r\n/* 清除浏览器默认边距，\r\n使边框和内边距的值包含在元素的width和height内 */\r\n\r\n* {\r\n    margin: 0;\r\n    padding: 0;\r\n    box-sizing: border-box;\r\n}\r\n\r\n/* 使用flex布局，让内容垂直和水平居中 */\r\n\r\nsection {\r\n    /* 相对定位 */\r\n    position: relative;\r\n    overflow: hidden;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    min-height: 100vh;\r\n    /* linear-gradient() 函数用于创建一个表示两种或多种颜色线性渐变的图片 */\r\n    background: linear-gradient(to bottom, #f1f4f9, #dff1ff);\r\n}\r\n\r\n/* 背景颜色 */\r\n\r\nsection .color {\r\n    /* 绝对定位 */\r\n    position: absolute;\r\n    /* 使用filter(滤镜) 属性，给图像设置高斯模糊*/\r\n    filter: blur(200px);\r\n}\r\n\r\n/* :nth-child(n) 选择器匹配父元素中的第 n 个子元素 */\r\n\r\nsection .color:nth-child(1) {\r\n    top: -350px;\r\n    width: 600px;\r\n    height: 600px;\r\n    background: #ff359b;\r\n}\r\n\r\nsection .color:nth-child(2) {\r\n    bottom: -150px;\r\n    left: 100px;\r\n    width: 500px;\r\n    height: 500px;\r\n    background: #fffd87;\r\n}\r\n\r\nsection .color:nth-child(3) {\r\n    bottom: 50px;\r\n    right: 100px;\r\n    width: 500px;\r\n    height: 500px;\r\n    background: #00d2ff;\r\n}\r\n\r\n.box {\r\n    position: relative;\r\n}\r\n\r\n/* 背景圆样式 */\r\n\r\n.box .circle {\r\n    position: absolute;\r\n    background: rgba(255, 255, 255, 0.1);\r\n    /* backdrop-filter属性为一个元素后面区域添加模糊效果 */\r\n    backdrop-filter: blur(5px);\r\n    box-shadow: 0 25px 45px rgba(0, 0, 0, 0.1);\r\n    border: 1px solid rgba(255, 255, 255, 0.5);\r\n    border-right: 1px solid rgba(255, 255, 255, 0.2);\r\n    border-bottom: 1px solid rgba(255, 255, 255, 0.2);\r\n    border-radius: 50%;\r\n    /* 使用filter(滤镜) 属性，改变颜色。\r\n    hue-rotate(deg)  给图像应用色相旋转 \r\n    calc() 函数用于动态计算长度值 \r\n    var() 函数调用自定义的CSS属性值x*/\r\n    filter: hue-rotate(calc(var(--x) * 70deg));\r\n    /* 调用动画animate，需要10s完成动画，\r\n    linear表示动画从头到尾的速度是相同的，\r\n    infinite指定动画应该循环播放无限次*/\r\n    animation: animate 10s linear infinite;\r\n    /* 动态计算动画延迟几秒播放 */\r\n    animation-delay: calc(var(--x) * -1s);\r\n}\r\n\r\n/* 背景圆动画 */\r\n\r\n@keyframes animate {\r\n\r\n    0%,\r\n    100%,\r\n        {\r\n        transform: translateY(-50px);\r\n    }\r\n\r\n    50% {\r\n        transform: translateY(50px);\r\n    }\r\n}\r\n\r\n.box .circle:nth-child(1) {\r\n    top: -50px;\r\n    right: -60px;\r\n    width: 100px;\r\n    height: 100px;\r\n}\r\n\r\n.box .circle:nth-child(2) {\r\n    top: 150px;\r\n    left: -100px;\r\n    width: 120px;\r\n    height: 120px;\r\n    z-index: 2;\r\n}\r\n\r\n.box .circle:nth-child(3) {\r\n    bottom: 50px;\r\n    right: -60px;\r\n    width: 80px;\r\n    height: 80px;\r\n    z-index: 2;\r\n}\r\n\r\n.box .circle:nth-child(4) {\r\n    bottom: -80px;\r\n    left: 100px;\r\n    width: 60px;\r\n    height: 60px;\r\n}\r\n\r\n.box .circle:nth-child(5) {\r\n    top: -80px;\r\n    left: 140px;\r\n    width: 60px;\r\n    height: 60px;\r\n}\r\n\r\n/* 登录框样式 */\r\n\r\n.container {\r\n    position: relative;\r\n    width: 400px;\r\n    min-height: 400px;\r\n    background: rgba(255, 255, 255, 0.1);\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    backdrop-filter: blur(5px);\r\n    box-shadow: 0 25px 45px rgba(0, 0, 0, 0.1);\r\n    border: 1px solid rgba(255, 255, 255, 0.5);\r\n    border-right: 1px solid rgba(255, 255, 255, 0.2);\r\n    border-bottom: 1px solid rgba(255, 255, 255, 0.2);\r\n}\r\n\r\n.form {\r\n    position: relative;\r\n    width: 100%;\r\n    height: 100%;\r\n    padding: 50px;\r\n}\r\n\r\n/* 登录标题样式 */\r\n\r\n.form h2 {\r\n    position: relative;\r\n    color: #fff;\r\n    font-size: 24px;\r\n    font-weight: 600;\r\n    letter-spacing: 5px;\r\n    margin-bottom: 30px;\r\n    cursor: pointer;\r\n}\r\n\r\n/* 登录标题的下划线样式 */\r\n\r\n.form h2::before {\r\n    content: \"\";\r\n    position: absolute;\r\n    left: 0;\r\n    bottom: -10px;\r\n    width: 0px;\r\n    height: 3px;\r\n    background: #fff;\r\n    transition: 0.5s;\r\n}\r\n\r\n.form h2:hover:before {\r\n    width: 53px;\r\n}\r\n\r\n.forget {\r\n    margin-top: 6px;\r\n    color: #fff;\r\n    letter-spacing: 1px;\r\n}\r\n\r\n.forget a {\r\n    color: #fff;\r\n    font-weight: 600;\r\n    text-decoration: none;\r\n    cursor: pointer;\r\n}\r\n</style>"]},"metadata":{},"sourceType":"module"}